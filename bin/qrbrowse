#!/usr/bin/perl
use 5.12.0;
use utf8;
use strict;
use warnings;
use open qw<:encoding(UTF-8) :std>;
use FindBin;
use lib "$FindBin::RealBin/../lib";
use QRBrowse::Encoder qw(get_encoder);
use Regexp::Common qw(URI);
use File::Temp qw(tempdir);
use File::Spec::Functions qw(catfile);
use File::HomeDir;
use YAML::Tiny qw (LoadFile);

$YAML::Syck::ImplicitTyping = 1;
$YAML::Syck::SingleQuote = 1;
my $VERSION = '0.0';

my $homedir = File::HomeDir->my_home;

my $config;

my @config_locations = (
    catfile($homedir, '.qrbrowser'),
    "$FindBin::RealBin/../etc/qrbrowser",
    '/etc/qrbrowser'
);

$config->{'patterns'} = [
    $RE{URI}{HTTP}{-scheme => qr/https?/}, # from Regexp::Common
    qr/\d{4,}/,
];

$config->{'toescape'} = {
    '<' => '&lt;',
    '>' => '&gt;',
    '&' => '&amp;',
};

$config->{'viewer'} = 'w3m';

foreach my $config_file (reverse (@config_locations)) {
   if (-e $config_file) {
       my $local_conf = LoadFile($config_file);
       #merge localconfig into config
       while ( my ($key, $value) = each(%{$local_conf}) ) {
           $config->{$key} = $value;
       }
    }
}

use Data::Dumper;
print Dumper($config);
my $qrenc = get_encoder();

sub orpatterns {
    return $_[0] if @_ == 1;
    return "(?:".join(")|(?:", @_).")";
}

my $toescape = orpatterns(map { quotemeta } keys %{ $config->{'toescape'} });


my $pattern = orpatterns(map ( { my $ret = eval; if (!$@ && defined($ret)) {
                $ret eq "Regexp" ? $ret : qr/$ret/ } else { () } } @{
        $config->{'patterns'} } ), $toescape);
my %qrfiles;
my $qrfile = 0;
my $tempdir = tempdir(CLEANUP => 1);

sub qrenc {
    my ($text) = @_;
    my $outfn = sprintf("qr_%d.txt", $qrfile++);
    open(my $outfh, ">", catfile($tempdir, $outfn))
        or die "Unable to open $outfn: $!\n";
    my $qr = $qrenc->encode($text);
    $qr =~ y/ */â–ˆ /;
    print $outfh $qr;
    close $outfh
        or die "Unable to close $outfn: $!\n";
    return $outfn;
}

sub qrfile {
    my ($text) = @_;
    if (!defined($qrfiles{$text})) {
        $qrfiles{$text} = qrenc($text);
    }
    my $fn = $qrfiles{$text};
    my $qtext = $text;
    $qtext =~ s/$toescape/$config->{'toescape'}->{$&}/og;
    return qq(<a href="$fn">$qtext</a>);
}

my $textf = catfile($tempdir, "index.html");
open (my $textfh, ">", $textf)
    or die "Unable to open index file: $!\n";

while (<>) {
    s/$pattern/
        exists($config->{'toescape'}->{$&}) ?
        $config->toescape->{$&} :
        qrfile($&)
    /oge;
    print $textfh $_."<br>";
}
close $textfh
    or die "Unable to close index file: $!";

system($config->{'viewer'}, $textf);
